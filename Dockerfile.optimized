# Multi-stage Docker build for resource optimization
FROM node:18-alpine AS base
WORKDIR /app
RUN apk add --no-cache curl

# Dependencies stage
FROM base AS deps
COPY package*.json ./
RUN npm ci --only=production --prefer-offline && npm cache clean --force

# Build stage
FROM base AS build
COPY package*.json ./
RUN npm ci --prefer-offline
COPY . .
RUN NODE_OPTIONS="--max-old-space-size=2048" npm run build

# Production stage
FROM base AS production
COPY --from=deps /app/node_modules ./node_modules
COPY --from=build /app/dist ./dist
COPY package*.json ./

# Resource limits and optimizations
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=512"
ENV NPM_CONFIG_CACHE=/tmp/.npm

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S teleshop -u 1001
RUN chown -R teleshop:nodejs /app
USER teleshop

EXPOSE 5000

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:5000/api/bot/status || exit 1

CMD ["npm", "start"]
